openapi-processor-mapping: v4

options:
  # the root package of the generated interfaces/model. The package folder tree will be created
  # inside {targetDir} configured in the build.gradle file. The generated interfaces and models
  # will be placed into the "api" and "model" subpackages of packageName:
  #  - interfaces => "${packageName}.api"
  #  - models => "${packageName}.model"
  package-name: io.openapiprocessor.openapi

  # generate javadoc from OpenAPI description properties
  javadoc: true

  # run the generated code through a code formatter
  # see gradle.properties to fix java 16+ errors.
  format-code: false

  # use bean validations with jakarta package name
  bean-validation: jakarta

  # use java records instead of pojos
  model-type: default

map:
  types:
    - type: string:uuid => java.util.UUID

    # annotate all generated model classes
    - type: object @ lombok.Builder
    - type: object @ lombok.EqualsAndHashCode

    # annotate Foo with a custom annotation
    - type: Foo @ io.openapiprocessor.samples.FooBar

    # do not generate Bar, instead use an existing class
    - type: Bar => io.openapiprocessor.samples.MappedBar

    # annotate Bar with a custom annotation, since Bar is mapped to MappedBar it will be placed at Bar properties
    - type: Bar @ io.openapiprocessor.samples.FooBar

    # more places with annotation
    - type: string:uuid @ io.openapiprocessor.samples.FooBar
    - type: string @ io.openapiprocessor.samples.FooBar
