// this build file is using a version catalog (see settings.gradle)

plugins {
    id 'idea'
    id 'java'
    id 'groovy'
    alias(libs.plugins.shadow)
    alias(libs.plugins.micronaut)
    alias(libs.plugins.versions)

    // add processor-gradle plugin
    alias(libs.plugins.processor.gradle)
}

group = 'io.openapiprocessor.samples'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("mn.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    runtimeOnly("ch.qos.logback:logback-classic")
}

application {
    mainClass.set("io.openapiprocessor.samples.Application")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("io.openapiprocessor.samples.*")
    }
}


// configure an openapi-processor inside the 'openapiProcessor' configuration by adding a nested
// configuration with the name of the openapi-processor and its options inside it.
//
// ... using 'spring' and 'json'.
openapiProcessor {

    // the path to the open api yaml file. Usually the same for all processors.
    apiPath "${projectDir}/src/api/openapi.yaml"

    // based on the name of the processor configuration the plugin creates a gradle task with name
    // "process${name of processor}"  (in this case "processSpring") to run the processor.
    micronaut {
        // the spring processor dependency
        // processor 'io.openapiprocessor:openapi-processor-core:2022.6-SNAPSHOT'
        // processor 'io.openapiprocessor:openapi-processor-micronaut:2022.4-SNAPSHOT'
        //processor "${libs.processor.core.get()}"
        processor "${libs.processor.micronaut.get()}"

        // setting api path inside a processor configuration overrides the one at the top.
        // apiPath "${projectDir}/src/api/openapi.yaml"

        // the destination folder for generating interfaces & models. This is the parent of the
        // {package-name} folder tree configured in the mapping file.
        targetDir "$projectDir/build/openapi"

        // processor specific options, creates a key => value map that is passed to the processors

        // file name of the mapping yaml configuration file. Note that the yaml file name must end
        // with either {@code .yaml} or {@code .yml}.
        mapping "${projectDir}/src/api/mapping.yaml"

        // sets the parser to SWAGGER, OPENAPI4J or INTERNAL. if not set SWAGGER is used.
        // OPENAPI4J provides better validation but is not maintained anymore.
        // INTERNAL provides full JSON schema validation
        parser 'INTERNAL'
    }

    // applying the rules described above the task to run this one is "processJson".
    json {
        // the json processor dependency
        // processor 'io.openapiprocessor:openapi-processor-json:2021.2'
        processor "${libs.processor.json.get()}"

        targetDir "$buildDir/json"
    }

}

// add the targetDir of the processor as additional source folder to java.
sourceSets {
    main {
        java {
            // add generated files
            srcDir 'build/openapi'
        }

        resources {
            srcDir "$buildDir/json"
        }
    }
}

// generate api before compiling
compileJava.dependsOn ('processMicronaut')
processResources.dependsOn ('processJson')
