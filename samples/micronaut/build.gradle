plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.4.2"

    // add processor-gradle plugin
    id("io.openapiprocessor.openapi-processor") version "2021.3"
}

group = 'io.openapiprocessor.samples'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("mn.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
}

application {
    mainClass.set("mn.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

// configure an openapi-processor inside the 'openapiProcessor' configuration by adding a nested
// configuration with the name of the openapi-processor and its options inside it.
//
// ... using 'spring' and 'json'.
openapiProcessor {

    // the path to the open api yaml file. Usually the same for all processors.
    apiPath "${projectDir}/src/api/openapi.yaml"

    // based on the name of the processor configuration the plugin creates a gradle task with name
    // "process${name of processor}"  (in this case "processSpring") to run the processor.
    micronaut {
        // the spring processor dependency
//        processor 'io.openapiprocessor:openapi-processor-core:2021.3'
        processor 'io.openapiprocessor:openapi-processor-micronaut:2021.3-SNAPSHOT'

        // setting api path inside a processor configuration overrides the one at the top.
        // apiPath "${projectDir}/src/api/openapi.yaml"

        // the destination folder for generating interfaces & models. This is the parent of the
        // {package-name} folder tree configured in the mapping file.
        targetDir "$projectDir/build/openapi"

        // processor specific options, creates a key => value map that is passed to the processors

        // file name of the mapping yaml configuration file. Note that the yaml file name must end
        // with either {@code .yaml} or {@code .yml}.
        mapping "${projectDir}/src/api/mapping.yaml"

        // sets the parser to SWAGGER or OPENAPI4J. if not set SWAGGER is used.
        // OPENAPI4J provides better validation.
        parser 'OPENAPI4J'
    }

    // applying the rules described above the task to run this one is "processJson".
    json {
        // the json processor dependency
        processor 'io.openapiprocessor:openapi-processor-json:2021.2'

        targetDir "$buildDir/json"
    }

}

// add the targetDir of the processor as additional source folder to java.
sourceSets {
    main {
        java {
            // add generated files
            srcDir 'build/openapi'
        }

        resources {
            srcDir "$buildDir/json"
        }
    }
}

// generate api before compiling
compileJava.dependsOn ('processMicronaut')
processResources.dependsOn ('processJson')
