// this build file is using a version catalog (see settings.gradle)
plugins {
    id 'java'
    alias(libs.plugins.boot)
    alias(libs.plugins.boot.deps)
    alias(libs.plugins.versions)
//    id 'idea'

    // add processor-gradle plugin
    alias(libs.plugins.processor.gradle)
}

group = 'io.openapiprocessor.samples'
version = '1.0.0-SNAPSHOT'


repositories {
    mavenLocal ()
    mavenCentral ()
}

tasks.withType(Test) {
    useJUnitPlatform()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
}

// configure an openapi-processor inside the 'openapiProcessor' configuration by adding a nested
// configuration with the name of the openapi-processor and its options inside it.
openapiProcessor {
    // the path to the open api yaml file. Usually the same for all processors.
    apiPath "${projectDir}/src/api/openapi.yaml"

    // based on the name of the processor configuration the plugin creates a gradle task with name
    // "process${name of processor}"  (in this case "processSpring") to run the processor.
    spring {
        // the spring processor dependency
//        processor 'io.openapiprocessor:openapi-processor-core:2022.6-SNAPSHOT'
//        processor 'io.openapiprocessor:openapi-processor-spring:2022.4-SNAPSHOT'
        processor "${libs.processor.core.get()}"
        processor "${libs.processor.spring.get()}"

        // setting api path inside a processor configuration overrides the one at the top.
        // apiPath "${projectDir}/src/api/openapi.yaml"

        // the destination folder for generating interfaces & models. This is the parent of the
        // {package-name} folder tree configured in the mapping file.
        targetDir "$projectDir/build/openapi"

        // processor specific options, creates a key => value map that is passed to the processor

        // file name of the mapping yaml configuration file. Note that the yaml file name must end
        // with either {@code .yaml} or {@code .yml}.
        mapping "${projectDir}/src/api/mapping.yaml"

        // sets the parser to SWAGGER, OPENAPI4J or INTERNAL. if not set SWAGGER is used.
        // OPENAPI4J provides better validation but is not maintained anymore.
        // INTERNAL provides full JSON schema validation
        parser 'INTERNAL'
    }
}


// add the targetDir of the processor as additional source folder to java.
sourceSets {
    main {
        java {
            // add generated files
            srcDir 'build/openapi'
        }
    }
}


// generate api before compiling
compileJava.dependsOn ('processSpring')
